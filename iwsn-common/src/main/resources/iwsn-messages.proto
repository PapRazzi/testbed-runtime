///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012, Institute of Telematics, University of Luebeck                                                //
// All rights reserved.                                                                                              //
//                                                                                                                   //
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the  //
// following conditions are met:                                                                                     //
//                                                                                                                   //
// - Redistributions of source code must retain the above copyright notice, this list of conditions and the following//
//   disclaimer.                                                                                                     //
// - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       //
//   following disclaimer in the documentation and/or other materials provided with the distribution.                //
// - Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or       //
//   promote products derived from this software without specific prior written permission.                          //
//                                                                                                                   //
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,//
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE     //
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,        //
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE//
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   //
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  //
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package de.uniluebeck.itm.tr.iwsn.messages;

option java_outer_classname = "Messages";
option java_multiple_files = true;

/////////////////////// REQUESTS /////////////////////// 

message Link {
	required string sourceNodeUrn = 1;
	required string targetNodeUrn = 2;
}

message AreNodesAliveRequest {
	repeated string nodeUrns = 1;
}

message AreNodesConnectedRequest {
	repeated string nodeUrns = 1;
}

message FlashImagesRequest {
	repeated string nodeUrns = 1;
	required bytes image     = 2;
}

message ResetNodesRequest {
	repeated string nodeUrns = 1;
}

message EnableVirtualLinksRequest {
	repeated Link links = 1;
}

message DisableVirtualLinksRequest {
	repeated Link links = 1;
}

message DisableNodesRequest {
	repeated string nodeUrns = 1;
}

message EnableNodesRequest {
	repeated string nodeUrns = 1;
}

message DisablePhysicalLinksRequest {
	repeated Link links = 1;
}

message EnablePhysicalLinksRequest {
	repeated Link links = 1;
}

message SendDownstreamMessagesRequest {
	repeated string targetNodeUrns = 1;
	required bytes  messageBytes   = 2;
}

message GetChannelPipelinesRequest {
	repeated string nodeUrns = 1;
}

message ChannelHandlerConfiguration {
	message KeyValuePair {
		required string key = 1;
		required string value = 2;
	}
	required string name = 1;
	repeated KeyValuePair configuration = 2;
}

message SetChannelPipelinesRequest {
	repeated string                      nodeUrns                     = 1;
	repeated ChannelHandlerConfiguration channelHandlerConfigurations = 2;
}

message Request {

	enum Type {
		ARE_NODES_ALIVE          = 1;
		ARE_NODES_CONNECTED      = 2;
		DISABLE_NODES            = 3;
		DISABLE_VIRTUAL_LINKS    = 4;
		DISABLE_PHYSICAL_LINKS   = 5;
		ENABLE_NODES             = 6;
		ENABLE_PHYSICAL_LINKS    = 7;
		ENABLE_VIRTUAL_LINKS     = 8;
		FLASH_IMAGES             = 9;
		GET_CHANNEL_PIPELINES    = 10;
		RESET_NODES              = 11;
		SEND_DOWNSTREAM_MESSAGES = 12;
		SET_CHANNEL_PIPELINES    = 13;
	}

	optional string                           reservationId                    = 1;
	required int64                            requestId                        = 2;
	required Type                             type                             = 3;

	optional AreNodesAliveRequest             areNodesAliveRequest             = 101;
	optional AreNodesConnectedRequest         areNodesConnectedRequest         = 102;
	optional DisableNodesRequest              disableNodesRequest              = 103;
	optional DisableVirtualLinksRequest       disableVirtualLinksRequest       = 104;
	optional DisablePhysicalLinksRequest      disablePhysicalLinksRequest      = 105;
	optional EnableNodesRequest               enableNodesRequest               = 106;
	optional EnablePhysicalLinksRequest       enablePhysicalLinksRequest       = 107;
	optional EnableVirtualLinksRequest        enableVirtualLinksRequest        = 108;
	optional FlashImagesRequest               flashImagesRequest               = 109;
	optional GetChannelPipelinesRequest       getChannelPipelinesRequest       = 110;
	optional ResetNodesRequest                resetNodesRequest                = 111;
	optional SendDownstreamMessagesRequest    sendDownstreamMessagesRequest    = 112;
	optional SetChannelPipelinesRequest       setChannelPipelinesRequest       = 113;
}

message SingleNodeProgress {
	optional string reservationId     = 1;
	required int64  requestId         = 2;
	required string nodeUrn           = 3;
	required uint32 progressInPercent = 4;
}

message SingleNodeResponse {
	optional string reservationId = 1;
	required int64  requestId     = 2;
	required string nodeUrn       = 3;
	optional bytes  response      = 4;
	optional int32  statusCode    = 5;
	optional string errorMessage  = 6;
}

message GetChannelPipelinesResponse {
	message GetChannelPipelineResponse {
		required string                      nodeUrn               = 1;
		repeated ChannelHandlerConfiguration handlerConfigurations = 2;
	}
	optional string                     reservationId = 1;
    required int64                      requestId     = 2;
	repeated GetChannelPipelineResponse pipelines     = 3;
}

/////////////////////// EVENTS /////////////////////// 

message UpstreamMessageEvent {
	required string sourceNodeUrn = 1;
	required uint64 timestamp     = 2;
	required bytes  messageBytes  = 3;
}

message DevicesAttachedEvent {
	repeated string nodeUrns  = 1;
	required uint64 timestamp = 2;
}

message DevicesDetachedEvent {
	repeated string nodeUrns  = 1;
	required uint64 timestamp = 2;
}

message GatewayConnectedEvent {
	required uint64 timestamp = 1;
	required string hostname  = 2;
}

message GatewayDisconnectedEvent {
	required uint64 timestamp = 1;
	required string hostname  = 2;
	repeated string nodeUrns  = 3;
}

message NotificationEvent {
	optional string nodeUrn   = 1;
	required uint64 timestamp = 2;
    required string message   = 3;
}

message ReservationStartedEvent {
	required string serializedKey = 1;
    required uint64 timestamp = 2;
}

message ReservationEndedEvent {
	required string serializedKey = 1;
    required uint64 timestamp = 2;
}

message ReservationMadeEvent {
	required string serializedKey = 1;
}

message ReservationCancelledEvent {
	required string serializedKey = 1;
    required uint64 timestamp = 2;

}

message ReservationFinalizedEvent {
    required string serializedKey = 1;
    required uint64 timestamp = 2;

}

message ReservationOpenedEvent {
    required string serializedKey = 1;
}

message ReservationClosedEvent {
    required string serializedKey = 1;
}

message DeviceConfigCreatedEvent {
	required string nodeUrn = 1;
}

message DeviceConfigUpdatedEvent {
	required string nodeUrn = 1;
}

message DeviceConfigDeletedEvent {
	required string nodeUrn = 1;
}

message Event {

	enum Type {

		UPSTREAM_MESSAGE      = 01;  // upstream, sent by gateway

		DEVICES_ATTACHED      = 10;  // upstream, sent by gateway
        DEVICES_DETACHED      = 11;  // upstream, sent by gateway or generated by portal

		GATEWAY_CONNECTED     = 20;  // upstream, sent by gateway
		GATEWAY_DISCONNECTED  = 21;  // upstream, generated by portal

		NOTIFICATION          = 30;  // upstream, sent by gateway or portal

		RESERVATION_STARTED   = 40;  // downstream, sent by portal
		RESERVATION_ENDED     = 41;  // downstream, sent by portal
		RESERVATION_MADE      = 42;  // downstream, sent by portal
		RESERVATION_CANCELLED = 43;  // downstream, sent by portal

        RESERVATION_OPENED = 44;  // downstream, sent by portal
        RESERVATION_CLOSED = 45;  // downstream, sent by portal
        RESERVATION_FINALIZED = 46;  // downstream, sent by portal

		DEVICE_CONFIG_CREATED = 50;  // downstream, sent by portal
		DEVICE_CONFIG_UPDATED = 51;  // downstream, sent by portal
		DEVICE_CONFIG_DELETED = 52;  // downstream, sent by portal
	}

	required int64 eventId = 1;
	required Type  type    = 2;

	optional UpstreamMessageEvent      upstreamMessageEvent      = 101;

	optional DevicesAttachedEvent      devicesAttachedEvent      = 110;
	optional DevicesDetachedEvent      devicesDetachedEvent      = 111;

	optional GatewayConnectedEvent     gatewayConnectedEvent     = 120;
	optional GatewayDisconnectedEvent  gatewayDisconnectedEvent  = 121;

	optional NotificationEvent         notificationEvent         = 130;

	optional ReservationStartedEvent   reservationStartedEvent   = 140;
	optional ReservationEndedEvent     reservationEndedEvent     = 141;
	optional ReservationMadeEvent      reservationMadeEvent      = 142;
	optional ReservationCancelledEvent reservationCancelledEvent = 143;

    optional ReservationOpenedEvent reservationOpenedEvent = 144;
    optional ReservationClosedEvent reservationClosedEvent = 145;
    optional ReservationFinalizedEvent reservationFinalizedEvent = 146;

	optional DeviceConfigCreatedEvent  deviceConfigCreatedEvent  = 150;
	optional DeviceConfigUpdatedEvent  deviceConfigUpdatedEvent  = 151;
	optional DeviceConfigDeletedEvent  deviceConfigDeletedEvent  = 152;
}

message EventAck {
	required int64 eventId = 1;
}

/////////////////////// MESSAGE ENVELOPE /////////////////////// 

message Message {

	enum Type {
		REQUEST                       = 1; // downstream
		PROGRESS                      = 2; // upstream
		RESPONSE                      = 3; // upstream
		GET_CHANNELPIPELINES_RESPONSE = 4; // upstream
		EVENT                         = 5; // upstream
		EVENT_ACK                     = 6; // upstream
		KEEP_ALIVE                    = 7; // both
		KEEP_ALIVE_ACK                = 8; // both
	}

	required Type                        type                        = 1;

	optional Request                     request                     = 101;
	optional SingleNodeProgress          progress                    = 102;
	optional SingleNodeResponse          response                    = 103;
	optional GetChannelPipelinesResponse getChannelPipelinesResponse = 104;
	optional Event                       event                       = 105;
	optional EventAck                    eventAck                    = 106;
}
