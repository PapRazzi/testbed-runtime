///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012, Institute of Telematics, University of Luebeck                                                //
// All rights reserved.                                                                                              //
//                                                                                                                   //
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the  //
// following conditions are met:                                                                                     //
//                                                                                                                   //
// - Redistributions of source code must retain the above copyright notice, this list of conditions and the following//
//   disclaimer.                                                                                                     //
// - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the       //
//   following disclaimer in the documentation and/or other materials provided with the distribution.                //
// - Neither the name of the University of Luebeck nor the names of its contributors may be used to endorse or       //
//   promote products derived from this software without specific prior written permission.                          //
//                                                                                                                   //
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,//
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE     //
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,        //
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE//
// GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   //
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  //
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

package de.uniluebeck.itm.tr.iwsn.messages;

option java_outer_classname = "Messages";
option java_multiple_files = true;

/////////////////////// REQUESTS /////////////////////// 

message Header {

	optional string      serializedReservationKey = 1; // an (optional) reservation ID, if request / event is associated with a reservation
	required int64       correlationId            = 2; // an ID to match requests and responses or events and event acks, should be unique for given time window
	required uint64      timestamp                = 3; // a timestamp in Unix format (ms since 1970 UTC)
	repeated string      nodeUrns                 = 4; // node URN(s) to which this request goes to / this response comes from / this event is about

	// routing directions
	required bool        downstream               = 5; // true if message should be forwarded towards nodes
	required bool        upstream                 = 6; // true if message should be forwarded towards user
	optional bool        broadcast                = 7 [default = false]; // true if message should be broadcastet towards all gateways (e.g., DeviceConfigUpdatedEvent)
	required MessageType type                     = 8; // type of the message that wraps this header (allows cleaner uniform code for handling messages of different types without type casting etc.)
}

message Link {
	required string sourceNodeUrn = 1;
	required string targetNodeUrn = 2;
}

message AreNodesAliveRequest {
	required Header      header = 1;
}

message AreNodesConnectedRequest {
	required Header      header = 1;
}

message DisableNodesRequest {
	required Header      header = 1;
}

message DisableVirtualLinksRequest {
	required Header      header = 1;
	repeated Link        links  = 2;
}

message DisablePhysicalLinksRequest {
	required Header      header = 1;
	repeated Link        links  = 2;
}

message EnableNodesRequest {
	required Header      header = 1;
}

message EnablePhysicalLinksRequest {
	required Header      header = 1;
	repeated Link        links  = 2;
}

message EnableVirtualLinksRequest {
	required Header      header = 1;
	repeated Link        links  = 2;
}

message FlashImagesRequest {
	required Header      header = 1;
	required bytes       image  = 2;
}

message GetChannelPipelinesRequest {
	required Header      header = 1;
}

message ResetNodesRequest {
	required Header      header = 1;
}

message SendDownstreamMessagesRequest {
	required Header      header       = 1;
	required bytes       messageBytes = 2;
}

message ChannelHandlerConfiguration {
	message KeyValuePair {
		required string key   = 1;
		required string value = 2;
	}
	required string       name          = 1;
	repeated KeyValuePair configuration = 2;
}

message SetChannelPipelinesRequest {
	required Header                      header                       = 1;
	repeated ChannelHandlerConfiguration channelHandlerConfigurations = 2;
}

message Progress {
	required Header      header            = 1;
	required uint32      progressInPercent = 2;
}

message Response {
	required Header      header        = 1;
	optional bytes       response      = 2;
	optional int32       statusCode    = 3;
	optional string      errorMessage  = 4;
}

message GetChannelPipelinesResponse {
	message GetChannelPipelineResponse {
		required string                      nodeUrn               = 1;
		repeated ChannelHandlerConfiguration handlerConfigurations = 2;
	}
	required Header                     header        = 1;
	repeated GetChannelPipelineResponse pipelines     = 2;
}

/////////////////////// EVENTS /////////////////////// 

message UpstreamMessageEvent {
	required Header      header       = 1;
	required bytes       messageBytes = 2;
}

message DevicesAttachedEvent {
	required Header      header   = 1;
}

message DevicesDetachedEvent {
	required Header      header   = 1;
}

message GatewayConnectedEvent {
	required Header      header   = 1;
	required string      hostname = 2;
}

message GatewayDisconnectedEvent {
	required Header      header   = 1;
	required string      hostname = 2;
}

message NotificationEvent {
	required Header      header  = 1;
	required string      message = 2;
}

message ReservationStartedEvent {
	required Header      header        = 1;
}

message ReservationEndedEvent {
	required Header      header        = 1;
}

message ReservationMadeEvent {
	required Header      header        = 1;
}

message ReservationCancelledEvent {
	required Header      header        = 1;
}

message ReservationClosedEvent {
	required Header      header        = 1;
}

message ReservationFinalizedEvent {
	required Header      header        = 1;
}

message ReservationOpenedEvent {
	required Header      header        = 1;
}

message DeviceConfigCreatedEvent {
	required Header      header  = 1;
}

message DeviceConfigUpdatedEvent {
	required Header      header  = 1;
}

message DeviceConfigDeletedEvent {
	required Header      header  = 1;
}

message EventAck {
	required Header      header = 1;
}

/////////////////////// MESSAGE ENVELOPE /////////////////////// 

enum MessageType {

	KEEP_ALIVE                       = 01;
	KEEP_ALIVE_ACK                   = 02;

	REQUEST_ARE_NODES_ALIVE          = 11;
	REQUEST_ARE_NODES_CONNECTED      = 12;
	REQUEST_DISABLE_NODES            = 13;
	REQUEST_DISABLE_VIRTUAL_LINKS    = 14;
	REQUEST_DISABLE_PHYSICAL_LINKS   = 15;
	REQUEST_ENABLE_NODES             = 16;
	REQUEST_ENABLE_PHYSICAL_LINKS    = 17;
	REQUEST_ENABLE_VIRTUAL_LINKS     = 18;
	REQUEST_FLASH_IMAGES             = 19;
	REQUEST_GET_CHANNEL_PIPELINES    = 20;
	REQUEST_RESET_NODES              = 21;
	REQUEST_SEND_DOWNSTREAM_MESSAGES = 22;
	REQUEST_SET_CHANNEL_PIPELINES    = 23;

	PROGRESS                         = 30;
	RESPONSE                         = 31;
	RESPONSE_GET_CHANNELPIPELINES    = 32;

	EVENT_UPSTREAM_MESSAGE           = 40;

	EVENT_DEVICES_ATTACHED           = 50;
	EVENT_DEVICES_DETACHED           = 51;
	EVENT_GATEWAY_CONNECTED          = 52;
	EVENT_GATEWAY_DISCONNECTED       = 53;

	EVENT_NOTIFICATION               = 60;

	EVENT_RESERVATION_STARTED        = 70;
	EVENT_RESERVATION_ENDED          = 71;
	EVENT_RESERVATION_MADE           = 72;
	EVENT_RESERVATION_CANCELLED      = 73;
	EVENT_RESERVATION_OPENED         = 74;
	EVENT_RESERVATION_CLOSED         = 75;
	EVENT_RESERVATION_FINALIZED      = 76;

	EVENT_DEVICE_CONFIG_CREATED      = 80;
	EVENT_DEVICE_CONFIG_UPDATED      = 81;
	EVENT_DEVICE_CONFIG_DELETED      = 82;

	EVENT_ACK                        = 90;
}

message Message {

	required MessageType                   type                          = 1;

	// REQUESTS
	optional AreNodesAliveRequest          areNodesAliveRequest          = 111;
	optional AreNodesConnectedRequest      areNodesConnectedRequest      = 112;
	optional DisableNodesRequest           disableNodesRequest           = 113;
	optional DisableVirtualLinksRequest    disableVirtualLinksRequest    = 114;
	optional DisablePhysicalLinksRequest   disablePhysicalLinksRequest   = 115;
	optional EnableNodesRequest            enableNodesRequest            = 116;
	optional EnablePhysicalLinksRequest    enablePhysicalLinksRequest    = 117;
	optional EnableVirtualLinksRequest     enableVirtualLinksRequest     = 118;
	optional FlashImagesRequest            flashImagesRequest            = 119;
	optional GetChannelPipelinesRequest    getChannelPipelinesRequest    = 120;
	optional ResetNodesRequest             resetNodesRequest             = 121;
	optional SendDownstreamMessagesRequest sendDownstreamMessagesRequest = 122;
	optional SetChannelPipelinesRequest    setChannelPipelinesRequest    = 123;

	// RESPONSES
	optional Progress                      progress                      = 130;
	optional Response                      response                      = 131;
	optional GetChannelPipelinesResponse   getChannelPipelinesResponse   = 132;

	// EVENTS
	optional UpstreamMessageEvent          upstreamMessageEvent          = 140;

	optional DevicesAttachedEvent          devicesAttachedEvent          = 150;
	optional DevicesDetachedEvent          devicesDetachedEvent          = 151;
	optional GatewayConnectedEvent         gatewayConnectedEvent         = 152;
	optional GatewayDisconnectedEvent      gatewayDisconnectedEvent      = 153;

	optional NotificationEvent             notificationEvent             = 160;

	optional ReservationStartedEvent       reservationStartedEvent       = 170;
	optional ReservationEndedEvent         reservationEndedEvent         = 171;
	optional ReservationMadeEvent          reservationMadeEvent          = 172;
	optional ReservationCancelledEvent     reservationCancelledEvent     = 173;
	optional ReservationOpenedEvent        reservationOpenedEvent        = 174;
	optional ReservationClosedEvent        reservationClosedEvent        = 175;
	optional ReservationFinalizedEvent     reservationFinalizedEvent     = 176;

	optional DeviceConfigCreatedEvent      deviceConfigCreatedEvent      = 180;
	optional DeviceConfigUpdatedEvent      deviceConfigUpdatedEvent      = 181;
	optional DeviceConfigDeletedEvent      deviceConfigDeletedEvent      = 182;

	// EVENTS ACK
	optional EventAck                      eventAck                      = 190;
}
